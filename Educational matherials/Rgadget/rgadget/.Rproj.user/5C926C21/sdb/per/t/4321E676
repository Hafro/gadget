{
    "contents" : "library(plyr)\nlibrary(reshape2)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(data.table)\n\n##' This function reads in the gadget output files defined in\n##' printfiles. This is a quick and dirty implementation that has been \n##' designed to read a few nice examples, so it may work for some instances\n##' and it may not. It assumes that the last line containing a comment ';'\n##' is the line describing the column names and is the last comment line.\n##' @title Read gadget printfiles\n##' @param path a character string with the name of the folder containing the printfiles\n##' @param suppress logical should warnings of missing files be suppressed\n##' @return a list containing the data that has been read in named after the files found in path.\nread.printfiles <- function(path='.',suppress=FALSE){\n##' worker function\n##' @title \n##' @param file \n##' @return \n##' @author Bjarki Thor Elvarsson\n  read.printfile <- function(file){\n#    file <- paste(path,file,sep='/')\n    tmp <- readLines(file)\n    if(length(tmp) == 0){\n      if(!suppress)\n        warning(sprintf('Warning in read.printfile -- %s is of length 0',file))\n      return(NULL)\n    }\n    skip <- max(grep(';',tmp[1:7]))\n    header <- gsub('; ','',tmp[skip])\n    header <- gsub(' ','.',unlist(strsplit(header,'-')))\n    data <- tryCatch(read.table(file,comment.char=';',header=FALSE,\n                                stringsAsFactors = FALSE),\n                     error = function(e){\n                       if(!suppress)\n                         print(sprintf('file corrupted -- %s', file))\n                       return(NULL)\n                     })\n    if(is.null(data))\n      return(NULL)\n    if(length(names(data)) != length(header)){\n      if(!suppress)\n        warning(sprintf('Error in read.printfile -- Header could not be read from file %s',file))\n    } else {\n      names(data) <- header\n    }\n    pos <- grep('Regression information',tmp)\n    if(length(pos)!=0){\n      regr <- read.table(text=gsub('; ','',\n                           tmp[(pos+1):length(tmp)]))[c(1,3,5,7)]\n      names(regr) <- c('label','intercept','slope','sse')\n      data <- merge(data,regr)\n      data <- mutate(data,\n                     predict = exp(intercept)*number^slope) ## 1000 hmm\n    }\n    pos <- grep('; Standard output file for the stock',tmp)\n    if(length(pos) != 0){\n      step1 <- data[c('year','step','age','area','number')]\n      next1 <- mutate(subset(step1,age>1),year=year-1,age=as.integer(age-1))\n      names(next1)[5] <- 'num.after.harv'\n      tmp <- merge(step1,next1)\n      tmp$Z <- log(tmp$number) - log(tmp$num.after.harv)\n      data <- merge(data,tmp[c('year','step','age','area','Z')],all.x=TRUE)\n    }\n  \n    return(data)\n  }\n  out.files <- list.files(path=path,\n                          full.names=TRUE,recursive=TRUE)\n  \n  printfiles <- llply(out.files,read.printfile)\n  names(printfiles) <- gsub('/','',gsub(path.expand(path),'',\n                                        out.files),fixed=TRUE)\n  class(printfiles) <- c('gadgetOut','list')\n  return(printfiles)\n}\n##' This functions reads the likelihood (input) file for gadget. The format of\n##' the likelihood file is described in gadget's user manual. \n##' @title Read likelihood\n##' @param files a vector of character strings containing the names of the likelihood files \n##' @return object of class gadget.likelihood, i.e. a list containing the various likelihood components\n##' @author Bjarki ??r Elvarsson\nread.gadget.likelihood <- function(files='likelihood'){\n  lik <- NULL\n  for(file in files){\n    lik <- c(lik,sub(' +$','',gsub('\\t',' ',readLines(file))))\n  }\n  lik <- lik[lik!='']\n  lik <- lik[!grepl(';',substring(lik,1,1))]\n  lik <- sapply(strsplit(lik,';'),function(x) sub(' +$','',x[1]))\n  \n  comp.loc <- grep('component',lik)\n  name.loc <- comp.loc+3\n  weights <- NULL\n  common <- c('name','weight','type','datafile','areaaggfile','lenaggfile',\n              'ageaggfile','sitype','function')\n  tmp.func <- function(comp){\n    loc <- grep(paste('[ \\t]',tolower(comp),sep=''),tolower(lik[name.loc]))  \n    if(sum(loc)==0){\n      return(NULL)\n    } else {\n      \n      dat <- ldply(loc, function(dd){\n        if(dd < length(comp.loc)) {\n          restr <- (comp.loc[dd] + 1):(comp.loc[dd+1]-1)\n        } else {\n          restr <- 1:length(lik) > comp.loc[dd]\n        }\n        \n        tmp <- sapply(strsplit(sapply(strsplit(lik[restr],'[ \\t]'),\n                                      function(x) {\n                                        paste(x[!(x==''|x=='\\t')],\n                                              collapse=' ')\n                                      }),' '),\n                      function(x) as.character(x))\n        if(class(tmp)!='list'){\n          names.tmp <- head(tmp,1)\n          tmp <- as.data.frame(tmp,stringsAsFactors=FALSE)[2,]\n          names(tmp) <- names.tmp\n          row.names(tmp) <- tmp$name\n          tmp$type <- tolower(tmp$type)\n        } else {\n          names.tmp <- sapply(tmp,function(x) x[1])\n          tmp <- sapply(tmp,function(x) paste(x[-1], collapse='\\t'))\n          names(tmp) <- names.tmp\n          tmp <- as.data.frame(t(tmp),stringsAsFactors=FALSE)\n          tmp$type <- tolower(tmp$type)\n        }\n        return(tmp)\n      })\n      if(is.null(weights)){\n        weights <<- dat[intersect(common, unique(c(names(weights),names(dat))))]\n      } else {\n        weights <<-\n          rbind.fill(dat, weights)[intersect(common, unique(c(names(weights),\n                                                              names(dat))))]\n      }\n      dat$weight <- NULL                   \n      return(dat)\n    }\n  }\n\n  likelihood <- list(penalty = tmp.func('penalty'),\n                     understocking = tmp.func('understocking'),\n                     migrationpenalty = tmp.func('migrationpenalty'),\n                     surveyindices = tmp.func('surveyindices'),\n                     catchdistribution = tmp.func('catchdistribution'),\n                     catchstatistics = tmp.func('catchstatistics'),\n                     surveydistribution = tmp.func('surveydistribution'),\n                     stockdistribution = tmp.func('stockdistribution'),\n                     stomachcontent = tmp.func('stomachcontent'),\n                     recaptures = tmp.func('recaptures'),\n                     recstatistics = tmp.func('recstatistics'),\n                     catchinkilos = tmp.func('catchinkilos')\n                     )\n  likelihood$weights <- weights\n  row.names(likelihood$weights) <- weights$name\n  likelihood$weights$weight <- as.numeric(weights$weight)\n  likelihood <- likelihood[c('weights',unique(likelihood$weights$type))]\n  class(likelihood) <- c('gadget.likelihood',class(likelihood))\n  return(likelihood)\n}\n##' Write a likelihood object to file\n##' @title Write likelihood\n##' @param lik object of class gadget.likelihood\n##' @param file name of the likelihood file\n##' @param data.folder location of data folder (if changed)\n##' @param bs.sample (for bootstrap), appends the appropriate replicate number to data file\n##' @return character string corresponding to the likelihood file (if desired)\n##' @author Bjarki ??r Elvarsson\nwrite.gadget.likelihood <- function(lik,file='likelihood',\n                                    data.folder=NULL, bs.sample=NULL){\n  lik.text <- sprintf('; Likelihood file - created in Rgadget\\n; %s - %s',\n                      file, Sys.Date())\n  weights <- lik$weights[c('name','weight')]\n  lik$weights <- NULL\n  for(comp in lik){ \n    if(!is.null(data.folder)){\n      comp$datafile <- paste(data.folder,comp$datafile,sep='/')\n    }\n    ## reorder surveyindices columns \n    if('surveyindices' %in% comp$type){\n      comp <-\n        comp[intersect(c('name','type','datafile','sitype','biomass',\n                         'areaaggfile','lenaggfile','surveynames','fleetnames',\n                         'stocknames','fittype','slope','intercept'),\n                       names(comp))]\n    }\n    comp <- na.omit(melt(merge(weights,comp,by='name',sort=FALSE),\n                         id.vars = 'name'))\n    comp.text <- ddply(comp,'name',function(x){\n      paste('[component]',\n            sprintf('name\\t\\t%s',x$name[1]),\n            paste(x$variable,x$value, sep = '\\t\\t',\n                  collapse = '\\n'),\n            ';', sep = '\\n')\n    })\n    \n    lik.text <- paste(lik.text,\n                      paste(comp.text$V1,\n                            collapse='\\n'),\n                      sep='\\n')\n  }\n  if(!is.null(bs.sample))\n    write(sprintf(lik.text,bs.sample),file=file)\n  else\n    write(lik.text,file=file)\n  invisible(lik.text)\n}\n\n##' This function merges to likelihood objects in one\n##' @title Merge gadget likelihood\n##' @param lik1 likelihood object\n##' @param lik2 likelihood object\n##' @return merged gadget likelihood object\n##' @author Bjarki Thor Elvarsson\nmerge.gadget.likelihood <- function(lik1,lik2){\n  tmp <- within(list(),\n                for(comp in unique(c(names(lik1),names(lik2)))){\n                  assign(comp,\n                         unique(rbind.fill(lik1[[comp]],lik2[[comp]])))\n                })\n  class(tmp) <- c('gadget.likelihood',class(tmp))\n  return(tmp)\n}\n\n##' This function retrives selected parts of the likelihood object\n##' @title Get Gagdget likelihood component(s)  \n##' @param likelihood likelihood object\n##' @param comp selected likelihood components\n##' @param inverse (logical) should inverse selection be applied\n##' @return likelihood object\n##' @author Bjarki Thor Elvarsson\nget.gadget.likelihood <- function(likelihood,comp,inverse=FALSE){\n  if(inverse)\n    weights <- subset(likelihood$weights,!(name %in% comp))\n  else\n    weights <- subset(likelihood$weights,name %in% comp)\n  tmp <-\n    within(list(),\n           for(type in weights$type){\n             restr <- likelihood[[type]][['name']] %in% comp\n             if(inverse)\n               restr <- !restr\n             assign(type,\n                    likelihood[[type]][restr,])\n           }\n           )\n  tmp$restr <- NULL\n  tmp$type <- NULL\n  tmp$weights <- weights\n  class(tmp) <- c('gadget.likelihood',class(tmp))\n  return(tmp)\n}\n\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @return \n##' @author Bjarki Thor Elvarsson\nnew.gadget.main <- function(){\n  main <-\n    list(timefile = '',\n         areafile = '',\n         printfiles = '',\n         stockfiles = '',\n         tagfiles = '',\n         otherfoodfiles = '',\n         fleetfiles = '',\n         likelihoodfiles = '')\n  class(main) <- c('gadget.main',class(main))\n  return(main)\n}\n\n##' Read gadget's main file\n##' @title Read main\n##' @param file main file location\n##' @return object of class gadget.main\n##' @author Bjarki ??r Elvarsson\nread.gadget.main <- function(file='main'){\n  if(!file.exists(file)) {\n    stop('Main file not found')\n  }\n  main <- sub(' +$','',readLines(file))\n  if(length(main) == 0)\n    stop(sprintf('Error in read.gadget.main, file %s is empty',file))\n  main <- main[main!='']\n  main <- main[!grepl(';',substring(main,1,1))]\n  main <- sapply(strsplit(main,';'),function(x) x[1])\n  main <- clear.spaces(main)\n  tmp <- sapply(main[sapply(main,length)!=1],function(x) x[2:length(x)])\n  names(tmp) <-  sapply(main[sapply(main,length)!=1],function(x) x[1])\n  main <- as.list(tmp)\n  class(main) <- c('gadget.main',class(main))\n  return(main)\n}\n\n\n##' Write gadget.main object to file\n##' @title Write main\n##' @param main gadget.main object\n##' @param file name of main file \n##' @return text of the main file (if desired)\n##' @author Bjarki ??r Elvarsson\nwrite.gadget.main <- function(main,file='main'){\n  main.text <- sprintf('; main file for gadget - created in Rgadget\\n; %s - %s',\n                       file,date())\n  if(is.null(main$printfiles)){\n    main$printfiles <- '; no printfile supplied'  \n  }\n  main.text <-\n    paste(main.text,\n          paste('timefile',main$timefile),\n          paste('areafile',main$areafile),\n          paste('printfiles',paste(main$printfiles,collapse='\\t')),\n          '[stock]',\n          paste('stockfiles',paste(main$stockfiles,collapse='\\t')),\n          ifelse(is.null(main$tagfiles), #| main$tagfiles == '',\n                 '[tagging]',\n                 paste('[tagging]\\ntagfiles',paste(main$tagfiles,\n                                                   collapse='\\t'))),\n          ifelse(is.null(main$otherfoodfiles), #| main$otherfoodfiles == '',\n                 '[otherfood]',\n                 paste('[otherfood]\\notherfoodfiles',\n                       paste(main$otherfoodfiles,collapse='\\t'))),\n          ifelse(is.null(main$likelihoodfiles), # | main$likelihoodfiles == '',\n                 '[fleet]',\n                 paste('[fleet]\\nfleetfiles',\n                       paste(main$fleetfiles,collapse='\\t'))),\n          '[likelihood]',\n          paste('likelihoodfiles',\n                paste(main$likelihoodfiles,collapse='\\t')),\n          sep='\\n')\n  write(main.text,file=file)\n  invisible(main.text)\n}\n  \n##' Clear tab and spaces from a string and return a list or a matrix of values \n##' @title Clear spaces\n##' @param text string \n##' @return list or matrix containing the (non-empty) values from the string\n##' @author Bjarki ??r Elvarsson\nclear.spaces <- function(text){\n  sapply(strsplit(sapply(strsplit(text,'[ \\t]'),\n                         function(x) {\n                           paste(x[!(x==''|x=='\\t')],\n                                 collapse=' ')\n                         }),' '),\n         function(x) x)\n}\n\n\n##' Read gadget parameter file\n##' @title Read param\n##' @param file parameter file\n##' @return dataframe\n##' @author Bjarki  Thor Elvarsson\nread.gadget.parameters <- function(file='params.in'){\n\n  params <- tryCatch(read.table(file,header=TRUE,\n                       comment.char=';',\n                       stringsAsFactors=FALSE),\n                     error = function(e){\n                       print(sprintf('Error in read.gadget.parameters -- %s cannot be read', file))\n                       return(NULL)\n                     })\n  if(is.null(params))\n    return(params)\n  row.names(params) <- params$switch\n  ## digg through the data written in the header\n  header <- readLines(file)\n  header <- header[grepl(';',substring(header,1,1))]\n\n  num.func <- function(pre){\n    post <- ' function evaluations'\n    num <- as.numeric(gsub(post,'',gsub(pre,'',header[grepl(pre,header)])))\n    num <- ifelse(length(num) == 0,NA,num)\n    return(num)\n  }\n\n  ## Number of function evaluations\n  sim.func.str <- '; Simulated Annealing algorithm ran for '\n  sim.pos <- grep(sim.func.str,header)\n  \n  hook.func.str <- '; Hooke & Jeeves algorithm ran for '\n  hook.pos <- grep(hook.func.str,header)\n  \n  bfgs.func.str <- '; BFGS algorithm ran for '\n  bfgs.pos <- grep(bfgs.func.str,header)\n  \n  ## final likelihood values from each component\n  lik.func <- function(i){\n    lik <- as.numeric(gsub('; and stopped when the likelihood value was ','',\n                           header[i]))\n    lik <- ifelse(length(lik) == 0,NA,lik)\n    return(lik)\n  }\n  \n  ## convergence\n  conv.func <- function(i){\n    error <- '; because an error occured during the optimisation'\n    converged <- '; because the convergence criteria were met'\n    maxiter <-\n      '; because the maximum number of function evaluations was reached'\n    msg <- ifelse(header[i]==error,'Error in optimisation',\n                  ifelse(header[i]==converged,'Convergence criteria were met',\n                         ifelse(header[i]==maxiter,\n                                'Maximum number of iterations',\n                                'No information')))\n    ifelse(length(msg)==0,NA,msg)\n  }\n  \n  \n  tmp <- list(simann=data.frame(numFunc=num.func(sim.func.str),\n                lik.val=lik.func(sim.pos+1),\n                convergence=conv.func(sim.pos+2),\n                stringsAsFactors=FALSE),\n              hooke=data.frame(numFunc=num.func(hook.func.str),\n                lik.val=lik.func(hook.pos+1),\n                convergence=conv.func(hook.pos+2),\n                stringsAsFactors=FALSE),\n              bfgs=data.frame(numFunc=num.func(bfgs.func.str),\n                lik.val=lik.func(bfgs.pos+1),\n                convergence=conv.func(bfgs.pos+2),\n                stringsAsFactors=FALSE))\n  class(params) <- c('gadget.parameters',class(params))\n  attr(params,'optim.info') <- tmp\n  return(params)\n}\n\n##' Write gadget input parameters\n##' @title Write params\n##' @param params params dataframe\n##' @param file a string naming the file to write to\n##' @param columns should a conventional column based parameter file be written out or\n##' should a line based parameter (used when evaluating gadget on a matrix) be used.\n##' @return a string containing the text of the params file (if desired)\n##' @author Bjarki ??r Elvarsson\nwrite.gadget.parameters <- function(params,file='params.out',columns=TRUE){\n  input.text <-\n    paste(\"; input file for the gadget model\",\n          \"; created automatically from Rgadget\",\n          sprintf('; %s - %s',file,date()),\n          paste(names(params),collapse='\\t'),\n          sep='\\n')\n  \n  if(!columns)\n    write(paste(c('switches',names(params)),collapse='\\t'),file=file)\n  else\n    write(input.text,file)\n  write.table(params,file=file,\n              quote=FALSE, row.names=FALSE, col.names=FALSE,\n              append=TRUE, sep=\"\\t\")\n\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param lik \n##' @param output \n##' @param file \n##' @return \n##' @author Bjarki Thor Elvarsson\nmake.gadget.printfile <- function(main='main',output='out',\n                                  aggfiles='print.aggfiles',\n                                  file='printfile'){\n  main <- read.gadget.main(main)\n  lik <- read.gadget.likelihood(main$likelihoodfiles)\n  stocks <- read.gadget.stockfiles(main$stockfiles)\n  fleets <- read.gadget.fleet(main$fleetfiles)\n  \n  header <-\n    paste(sprintf('; gadget printfile, created in %s',Sys.Date()),\n          '[component]',\n          'type\\tlikelihoodsummaryprinter',\n          sprintf('printfile\\t%s/likelihoodsummary', output),\n          ';',sep='\\n')\n\n  lik.template <-\n    paste('[component]',\n          'type\\tlikelihoodprinter',\n          'likelihood\\t%1$s',\n          sprintf('printfile\\t%s/%%1$s',output),\n          ';', sep='\\n')\n\n  stock.std <-\n    paste('[component]',\n          'type\\tstockstdprinter',\n          'stockname\\t%1$s',\n          sprintf('printfile\\t%s/%%1$s.std',output),\n          'yearsandsteps\\t all 1',sep='\\n')\n\n  stock.full <-\n    paste('[component]',\n          'type\\tstockprinter',\n          'stocknames\\t%1$s',\n          sprintf('areaaggfile\\t%s/%%1$s.area.agg',aggfiles),\n          sprintf('ageaggfile\\t%s/%%1$s.allages.agg',aggfiles),\n          sprintf('lenaggfile\\t%s/%%1$s.len.agg',aggfiles),\n          sprintf('printfile\\t%s/%%1$s.full',output),\n          'yearsandsteps\\t all 1',sep='\\n')\n\n  predator <-\n    paste('[component]',\n          'type\\tpredatorpreyprinter',\n          'predatornames\\t%2$s',\n          'preynames\\t%1$s',\n          sprintf('areaaggfile\\t%s/%%1$s.area.agg',aggfiles),\n          sprintf('ageaggfile\\t%s/%%1$s.age.agg',aggfiles),\n          sprintf('lenaggfile\\t%s/%%1$s.alllen.agg',aggfiles),\n          sprintf('printfile\\t%s/%%1$s.prey',output),\n          'yearsandsteps\\tall all',\n          sep = '\\n')\n\n  dir.create(aggfiles, showWarnings = FALSE)\n  dir.create(output, showWarnings = FALSE)\n\n  l_ply(stocks,\n        function(x){\n          writeAggfiles(x,folder=aggfiles)          \n        })\n  \n  txt <- sprintf(lik.template,\n                 subset(lik$weights,\n                        !(type %in% c('understocking','penalty',\n                                      'migrationpenalty')))[['name']])\n  write(paste(header,paste(txt,collapse='\\n'),\n              paste(sprintf(stock.std,laply(stocks,\n                                            function(x) x@stockname)),\n                    collapse='\\n'),\n              paste(sprintf(stock.full,laply(stocks,\n                                            function(x) x@stockname)),\n                    collapse='\\n'),\n              paste(sprintf(predator,laply(stocks,\n                                           function(x) x@stockname),\n                            paste(fleets$fleet$fleet,collapse = ' ')),\n                    collapse='\\n'),\n              sep='\\n'),\n        file=file)\n\n}\n\n##' Read gadget printfile\n##' @title Read gadget printfile\n##' @param file string containing the path to the printfile\n##' @return list of the prinfile components.\n##' @author Bjarki Thor Elvarsson\nread.gadget.printfile <- function(file='printfile'){\n  printfile <- strip.comments(file)\n  comp.loc <- grep('component',printfile)\n  name.loc <- grep('printfile',printfile)\n  name.print <- sapply(printfile[grep('printfile',printfile)],function(x) x[2])\n  name.print <- sapply(strsplit(name.print,'/'),function(x) tail(x,1))\n  diff.comp <- diff(c(comp.loc,length(printfile)+1))-1\n#  type.loc <- grep('type',printfile)\n#  types <- unique(sapply(printfile[type.loc],function(x) x[2]))\n#  print.types <- llply(types,function(x) grep(x,printfile))\n#  names(print.types) <- types\n  \n  tmp.func <- function(restr){\n    names.tmp <- sapply(printfile[restr],       \n                        function(x) x[1])\n    tmp <- lapply(sapply(printfile[restr],                                \n                         function(x) x[-1]),unlist)\n    names(tmp) <- names.tmp\n    return(tmp)\n  }\n  \n  print <- llply(1:length(comp.loc),\n                 function(x) tmp.func(comp.loc[x]+1:diff.comp[x]))\n  names(print) <- name.print\n  return(print)\n}\n##' Write the gadget prinfile to file, optionally changing the output directory\n##' of the printfile components.\n##' @title Write Gadget printfile\n##' @param print printfile object\n##' @param file string containing the desired location of the printfile\n##' @param output.dir where should the output from the prinfile components be written, defaults to 'out'.\n##' @return (invisible) text of the printfile if desired.\n##' @author Bjarki Thor Elvarsson\nwrite.gadget.printfile <- function(print,file='prinfile',output.dir='out'){\n  print.text <- sprintf('; Printfile for gadget, created by Rgadget\\n; %s',file)\n  for(name in names(print)){\n    tmp <- print[name][[name]]\n    tmp[['printfile']] <- paste(output.dir,name,sep='/')\n    print.text <- paste(print.text,\n                        ';\\n[component]',\n                        paste(names(tmp),sapply(tmp,function(x) paste(x,collapse='\\t')),\n                              sep='\\t',collapse='\\n'),\n                        sep='\\n')\n  }\n  write(print.text,file)\n  invisible(print.text)\n}\n\n##' Produce diagnostics \n##'\n##' .. content for \\details{} ..\n##' @title Gadget results\n##' @param grouping --defunct--\n##' @param final --defunct--\n##' @param wgts location of the folder whith results from the\n##' iterative refweighting\n##' @param normalize (logical) should the resulting table be normalized\n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.results <- function(grouping=list(),\n                                final=list(final='final'),\n                                wgts='WGTS',\n                                normalize = FALSE                               \n                                ){\n\n  read.gadget.SS <- function(file='lik.out'){\n    lik.out <- readLines(file)\n    SS <- as.numeric(clear.spaces(strsplit(lik.out[length(lik.out)],\n                                           '\\t\\t')[[1]][2]))\n    return(SS)\n  }\n  likelihood <- read.gadget.likelihood(sprintf('%s/likelihood.final',wgts))\n  grouping <- read.gadget.grouping(lik=likelihood,wgts=wgts)\n  comp.tmp <- subset(likelihood$weights,\n                     !(type %in% c('penalty','understocking',\n                                   'migrationpenalty'))&\n                     !(name %in% unlist(grouping)))$name\n  comp <- within(grouping,\n                 for(item in comp.tmp){\n                   assign(item, item)\n                 })\n  comp$item <- NULL\n  res <-\n    rbind.fill(ldply(comp,\n                     function(x)\n                     read.gadget.SS(paste(wgts,\n                                          paste('lik',\n                                                paste(x,collapse='.'),\n                                                sep='.'),sep='/'))),\n               ldply(final,\n                     function(x)\n                     read.gadget.SS(paste(wgts,\n                                          paste('lik',\n                                                paste(x,collapse='.'),\n                                                sep='.'),sep='/'))))\n  names(res)[-1] <- likelihood$weights$name\n  rownames(res) <- res$.id\n  if(normalize){\n    for(group in names(grouping)){\n      for(comp in grouping[[group]]){\n        res[,comp] <- res[,comp]/res[group,comp]\n      }\n    }\n  }\n     \n  return(res)\n}\n\n\n##' Read data used by the various components\n##' @title Read likelihood data\n##' @param likelihood object of class gadget.likelihood\n##' @return list of dataframes and degress of freedom\n##' @author Bjarki ??r Elvarsson\nread.gadget.data <- function(likelihood){\n  read.agg <- function(x, first = FALSE){\n\n    if(first){\n      return(sapply(strsplit(readLines(x),'[\\t ]'),function(x) x[1])) \n    }  else {\n      return(read.table(x,stringsAsFactors=FALSE,comment.char=';'))      \n    }\n  }\n  read.func <- function(x){\n    \n    dat <- tryCatch(read.table(x$datafile,comment.char=';'),\n                    error = function(x) NULL)\n    \n    area.agg <- tryCatch(read.agg(x$areaaggfile, first = TRUE),\n                         warning = function(x) NULL,\n                         error = function(x) NULL)\n    age.agg <- tryCatch(read.agg(x$ageaggfile, first = TRUE),\n                        warning = function(x) NULL,\n                        error = function(x) NULL)\n    len.agg <- tryCatch(read.agg(x$lenaggfile),\n                        warning = function(x) NULL,\n                        error = function(x) NULL)\n    \n    if(x$type=='catchdistribution'){\n      names(dat) <- c('year','step','area','age','length','number')\n    }\n    if(x$type=='catchstatistics'){\n      if(x[['function']] %in%\n         c('lengthcalcstddev','weightnostddev','lengthnostddev'))\n        names(dat) <- c('year','step','area','age','number','mean')\n      if(x[['function']] %in% c('lengthgivenstddev','weightgivenstddev',\n                           'lengthgivenvar'))\n        names(dat) <- c('year','step','area','age','number','mean','stddev') \n    }\n    if(x$type=='stockdistribution'){\n      names(dat) <- c('year','step','area','stock','age','length','number')\n    }\n    if(x$type=='surveyindices'){\n      if(x$sitype %in% c('lengths','fleets') )\n        names(dat) <- c('year','step','area','length','number')\n      if(x$sitype=='ages')\n        names(dat) <- c('year','step','area','age','number')\n      if(x$sitype=='acoustic')\n        names(dat) <- c('year','step','area','survey','acoustic')\n      if(x$sitype=='effort')\n        names(dat) <- c('year','step','area','fleet','effort')\n    }\n    if(x$type == 'surveydistribution'){\n      names(dat) <- c('year','step','area','age','length','number')\n    }\n    if(x$type=='stomachcontent'){\n      names(dat) <- c('year','step','area','predator','prey','ratio')\n    }\n    if(x$type=='recaptures'){\n      names(dat) <- c('tagid','year','step','area','length','number')\n    }\n    if(x$type=='recstatistics'){\n      if(x[['function']]=='lengthgivenstddev')\n        names(dat) <- c('tagid','year','step','area','number','mean','stddev')\n      else\n        names(dat) <- c('tagid','year','step','area','number','mean')\n    }\n    if(x$type=='catchinkilos'){\n#      if(x$aggregationlevel==1)\n        names(dat) <- c('year','area','fleet','biomass')\n#      else\n#        names(dat) <- c('year','step','area','fleet','biomass')\n    }\n    \n    restr.area <- (dat$area %in% area.agg)\n    if(length(restr.area)==0)\n      restr.area <- TRUE\n    restr.age <- (dat$age %in% age.agg)\n    if(length(restr.age)==0)\n      restr.age <- TRUE\n    restr.len <- (dat$length %in% len.agg[,1])\n    if(length(restr.len)==0)\n      restr.len <- TRUE\n    dat <- dat[restr.area&restr.age&restr.len,]\n    if('length' %in% names(dat)){\n      names(len.agg)[1:3] <- c('length','lower','upper')\n      dat <- merge(dat,len.agg,all.x=TRUE)\n    }\n    return(dat)\n  }\n\n  lik.dat <- dlply(subset(likelihood$weights,\n                          !(type %in% c('penalty', 'understocking',\n                                        'migrationpenalty'))),\n                   'type',\n                   function(x) dlply(x,'name',read.func))\n\n  df <- lapply(lik.dat,function(x)\n              sapply(x,function(x){\n                x <- na.omit(x)\n                tmp <- 0\n                if(length(intersect(c('lower','upper'),names(x)))>0){\n                  tmp <- 2\n                }\n                nrow(x[x[,ncol(x)-tmp]>0,])\n              }))\n  gadDat <- list(dat=lik.dat,df=df)\n  class(gadDat) <- c('gadgetData','list')\n  return(gadDat)\n}\n\n##' Read optinfo parameters from file\n##' @title Read gadget  \n##' @param file location of the optinfofile\n##' @return optinfo object\n##' @author Bjarki ??r Elvarsson\nread.gadget.optinfo <- function(file='optinfofile'){\n  optinfo <- readLines(file)\n  optinfo <- na.omit(sapply(strsplit(optinfo,';'),function(x) x[1]))\n  simann <- (1:length(optinfo))[(optinfo == '[simann]')]\n  hooke <- (1:length(optinfo))[(optinfo == '[hooke]')]\n  bfgs <- (1:length(optinfo))[(optinfo == '[bfgs]')]\n\n  vars <- c(simann-1,hooke-1,bfgs-1,length(optinfo))\n  simann.end <- min(vars[vars>simann])\n  hooke.end <-  min(vars[vars>hooke])\n  bfgs.end <- min(vars[vars>bfgs])\n  tmp.func <- function(start,end){\n    x <-  as.data.frame(clear.spaces(optinfo[start:end]),\n                        stringsAsFactors=FALSE)\n    names(x) <- x[1,]\n    x <- x[2,]\n    return(x)\n  }\n  optinfo <- list(simann = tmp.func(simann+1,simann.end),\n                  hooke = tmp.func(hooke+1,hooke.end),\n                  bfgs = tmp.func(bfgs+1,bfgs.end))\n  class(optinfo) <- c('gadget.optinfo',class(optinfo))\n  return(optinfo)\n}\n\n##' Write optinfo to file\n##' @title Write gadget optinfo\n##' @param optinfo optinfo object\n##' @param file file\n##' @param location location\n##' @return text of the optinfofile (if desired)\n##' @author Bjarki ??r Elvarsson\nwrite.gadget.optinfo<-function(optinfo,file='optinfofile'){\n  opt.text <- \n    paste(\"; optimisation file for gadget\",\n          \"; created in R-gadget\",\n          sprint('; %s - %s',file,date()),\n          sep='\\n')\n  for(comp in names(optinfo)){\n    opt.text <-\n      paste(opt.text,\n            sprintf('[%s]',comp),\n            paste(names(optinfo[[comp]]),\n                  optinfo[[comp]],\n                  sep='\\t\\t',collapse='\\n'),\n            sep='\\n')\n  }\n  write(opt.text,file=file)\n  invisible(opt.text)\n}\n\n\n\n##' Read in the gadget likelihood output.\n##' @title Read gadget lik.out \n##' @param file string containing the name of the file\n##' @return a list containing the swicthes (names of variable), weigths\n##' (l?kelihood components) and data (dataframe with the parameter values,\n##' likelihood component values and the final score.\n##' @author Bjarki Thor Elvarsson\nread.gadget.lik.out <- function(file='lik.out',suppress=FALSE){\n  if(!file.exists(file)){\n    return(NULL)\n  }     \n  lik <-  tryCatch(readLines(file),\n                   error = function(e){\n                     if(!suppress)\n                       print(sprintf('file corrupted -- %s', file))\n                     return(NULL)\n                   })\n  \n  i <- grep(\"Listing of the switches\",lik)\n  i1 <- grep(\"Listing of the likelihood components\",lik)\n  i2 <- grep(\"Listing of the output from the likelihood\",lik)\n\n  if(is.null(i)|is.null(i1)|is.null(i2)){\n    warning(sprintf('file %s is corrupt',file))\n    return(NULL)\n  }\n  \n  switches <- tryCatch(lapply(strsplit(lik[(i+1):(i1-2)],'\\t'),unique),\n                       error = function(e){\n                         if(!suppress)\n                           print(sprintf('file corrupted -- %s', file))\n                         return(NULL)\n                       })\n  if(is.null(switches)){\n    return(NULL)\n  }\n  names(switches) <- sapply(switches,function(x) x[1])\n  switches <- lapply(switches,function(x) x[-1])\n\n  weights <- t(sapply(strsplit(lik[(i1+3):(i2-2)],'\\t'),function(x) x))\n  weights <- as.data.frame(weights,stringsAsFactors=FALSE)\n  weights$V2 <- as.numeric(weights$V2)\n  weights$V3 <- as.numeric(weights$V3)\n  names(weights) <- c('Component','Type','Weight')\n  \n  data <- read.table(file,skip=(i2+1))\n  names(data) <- c('iteration',names(switches),weights$Component,'score')\n  attr(data,'Likelihood components') <- weights$Component\n  attr(data,'Parameters') <- names(switches)\n  lik.out <- list(switches=switches,weights=weights,data=data)\n  class(lik.out) <- c('gadget.lik.out',class(lik.out))\n  return(lik.out)\n}\n\n\n\n##' Helper function created to clear out all comments (indicated by ';') and \n##' unwanted spaces from gadget input and output files.\n##' @title Strip comments\n##' @param file location of the gadget input file\n##' @return list containing the lines from the file stripped of unwanted text.\n##' @author Bjarki Thor Elvarsson\nstrip.comments <- function(file='main'){\n  tmp <- unlist(llply(file,readLines))\n  main <- sub('\\t+$',' ',tmp)\n  main <- sub(' +$','',main)\n  main <- gsub('(','( ',main,fixed=TRUE)\n  main <- gsub(')',' )',main,fixed=TRUE)\n  main <- main[main!='']\n  comments <- main[grepl(';',substring(main,1,1))]\n  main <- main[!grepl(';',substring(main,1,1))]\n  main <- sapply(strsplit(main,';'),function(x) x[1])  \n  main <- clear.spaces(main)\n#  attr(main,'comments') <- comments\n  return(main)\n}\n\n\n##' <description>\n##'\n##' <details>\n##' @title \n##' @param main.file \n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.model <- function(main.file='main'){\n  gadget.model <-\n    within(list(),\n           main <- read.gadget.main(main.file),\n           time <- read.gadget.time(main$timefile),\n           area <- read.gadget.area(main$areafile),\n           print <- read.gadget.printfile(main$printfile),\n           stocks <- read.gadget.stockfiles(main$stockfiles),\n           tagging <- read.gadget.tagfiles(main$tagfiles),\n           otherfood <- read.gadget.otherfood(main$otherfoodfiles),\n           fleets <- read.gadget.fleet(main$fleetfiles),\n           likelihood <- read.gadget.likelihood(main$likelihoodfiles)\n           )\n  class(gadget.model) <- c('gadget.model',class(gadget.model))\n}\n\n##' <description>\n##'\n##' <details>\n##' @title \n##' @param stock.files \n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.stockfiles <- function(stock.files){\n  tmp.func <- function(sf){\n    stock <- strip.comments(sf)\n\n    growth.loc <- grep('doesgrow', stock, ignore.case = TRUE)\n    mort.loc <- grep('naturalmortality', stock, ignore.case = TRUE)\n    init.loc <- grep('initialconditions', stock, ignore.case = TRUE)\n    pred.loc <- init.loc - 1\n    if(tolower(stock[init.loc+1])=='numbers'){\n      init.loc <- init.loc + 1\n    }\n#    initfile.loc <- #grep('normalcondfile',stock, ignore.case =TRUE)\n#      c(grep('normalcondfile',stock, ignore.case =TRUE),\n#        grep('normalparamfile',stock, ignore.case =TRUE),\n#        grep('numberfile',stock, ignore.case =TRUE))\n    eat.loc <- grep('doeseat', stock, ignore.case = TRUE)\n    migrate.loc <- grep('doesmigrate', stock, ignore.case = TRUE)\n    initfile.loc <- migrate.loc -1 \n    mature.loc <- grep('doesmature', stock, ignore.case = TRUE)\n    move.loc <- grep('doesmove', stock, ignore.case = TRUE)\n    renew.loc <- grep('doesrenew', stock, ignore.case = TRUE)\n    spawn.loc <- grep('doesspawn', stock, ignore.case = TRUE)\n    stray.loc <- grep('doesstray', stock, ignore.case = TRUE)\n\n    growth.info <- function(tmp){\n      if(length(tmp)==1)\n        tmp <- new('gadget-growth')\n      else {\n        names.tmp <- sapply(tmp,function(x) x[1])\n        tmp <- llply(tmp,function(x) paste(x[-1],collapse=' '))\n        names(tmp) <- names.tmp\n\n        if(is.null(tmp$growthfunction))\n          tmp$growthfunction <- vector()\n        if(is.null(tmp$wgrowthfunction))\n          tmp$wgrowthfunction <- vector()\n        if(is.null(tmp$lgrowthfunction))\n          tmp$lgrowthfunction <- vector()\n        if(is.null(tmp$yeareffect))\n          tmp$yeareffect <- vector()\n        if(is.null(tmp$stepeffect))\n          tmp$stepeffect <- vector()\n        if(is.null(tmp$areaeffect))\n          tmp$areaeffect <- vector()\n        \n        tmp <- new('gadget-growth',\n                   growthfunction = tmp$growthfunction,\n                   ## growthfunction parameters\n                   growthparameters = tmp$growthparameters,\n#                   wgrowthparameters = tmp$wgrowthparameters,\n#                   lgrowthparameters = tmp$lgrowthparameters,\n#                   yeareffect = tmp$yeareffect,\n#                   stepeffect = tmp$stepeffect,\n#                   areaeffect = tmp$areaeffect,\n                   ## growth implementation\n                   beta = tmp$beta,\n                   maxlengthgroupgrowth = tmp$maxlengthgroupgrowth)\n      }\n      return(tmp)\n    }\n\n    prey.info <- function(tmp){\n      if(length(tmp)==1){\n        tmp <- new('gadget-prey')\n      } else {\n        tmp <- new('gadget-prey',\n                   name = stock[[1]][2],\n                   preylengths = read.table(tmp[[2]][2],comment.char=';'),\n                   energycontent = ifelse(length(tmp)==3,as.numeric(tmp[[3]][2]),\n                     1))\n      }\n      return(tmp)\n    }\n\n    pred.info <- function(tmp){\n      if(length(tmp)==1){\n        tmp <- new('gadget-predator')\n      } else {\n        pref.loc <- grep('preference',tmp)\n        maxcon.loc <- grep('maxconsumption',tmp)\n        half.loc <- grep('halffeedingvalue',tmp)\n        suit <- ldply(2:(pref.loc-1),\n                      function(x){\n                        c(stock = tmp[[x]][1],\n                          suitability = paste(tmp[[x]][-1],collapse=' '))\n                      })\n        pref <- ldply(pref.loc,\n                      function(x){\n                        c(stock = tmp[[x]][1],\n                          preference = paste(tmp[[x]][-1],collapse=' '))\n                      })\n        tmp <- new('gadget-predator',\n                   suitability = suit,\n                   preferene = pref,\n                   maxconsumption = as.numeric(tmp[[maxcon.loc]][2]),\n                   halffeedingvalue = as.numeric(tmp[[half.loc]][2]))\n      }\n      return(tmp)\n    }\n\n    \n    \n    st <-\n      new('gadget-stock',\n          stockname = stock[[1]][2],\n          livesonareas = as.numeric(stock[[2]][-1]),\n          minage = as.numeric(stock[[3]][2]),\n          maxage = as.numeric(stock[[4]][2]),\n          minlength = as.numeric(stock[[5]][2]),\n          maxlength = as.numeric(stock[[6]][2]),\n          dl = as.numeric(stock[[7]][2]),\n          refweight = read.table(stock[[8]][2],comment.char=';'),\n          growthandeatlengths = read.table(stock[[9]][2],comment.char=';'),\n          doesgrow = as.numeric(stock[[growth.loc]][2]),\n          growth = growth.info(stock[growth.loc:(mort.loc-1)]),\n          naturalmortality = as.numeric(stock[[mort.loc]][-1]),\n          iseaten = as.numeric(stock[[mort.loc+1]][2]),\n          preyinfo = prey.info(stock[(mort.loc+1):(eat.loc-1)]),\n          doeseat = as.numeric(stock[[eat.loc]][2]),\n          predator = pred.info(stock[eat.loc:(pred.loc)]),\n          initialconditions = list(minage = stock[[init.loc + 1]][2],\n            maxage = stock[[init.loc + 2]][2],\n            minlength = stock[[init.loc + 3]][2],\n            maxlength = stock[[init.loc + 4]][2],\n            dl = ifelse(tolower(stock[[init.loc + 5]][1])=='dl',\n              stock[[init.loc + 5]][2],1),\n            sdev = ifelse(tolower(stock[[init.loc + 6]][1])=='sdev',\n              stock[[init.loc + 6]][2], 1)),\n          initialdata = read.gadget.table(stock[[initfile.loc]][2]),\n          doesmigrate = as.numeric(stock[[migrate.loc]][2]),\n          doesmature =  as.numeric(stock[[mature.loc]][2]),\n          doesmove = as.numeric(stock[[move.loc]][2]),\n          doesrenew =  as.numeric(stock[[renew.loc]][2]),\n          renewal = list(\n            minlength = ifelse(as.numeric(stock[[renew.loc]][2]) == 0,\n              '',\n              as.numeric(stock[[renew.loc + 1]][2])),\n            maxlength = ifelse(as.numeric(stock[[renew.loc]][2]) == 0,\n              '',\n              as.numeric(stock[[renew.loc + 2]][2]))),\n          renewal.data = tryCatch(read.gadget.table(stock[[renew.loc+3]][2]),\n            error=function(x){\n              tryCatch(read.gadget.table(stock[[renew.loc+4]][2]),\n                       error=function(x) data.frame(text='No renewal data'))\n            }),\n          doesspawn = as.numeric(stock[[spawn.loc]][2]),\n          doesstray = ifelse(length(stray.loc)==0,\n            0,as.numeric(stock[[stray.loc]][2]))\n          )\n        \n    return(st)\n  }\n  stocks <- llply(stock.files,tmp.func)\n  return(stocks)\n}\n\n##' <description>\n##'\n##' <details>\n##' @title \n##' @param area.file \n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.area <- function(area.file='area'){\n  area <- strip.comments(area.file)\n  areas <- area[[1]][-1]\n  size <- area[[2]][-1]\n  temperature <-\n    as.data.frame(t(sapply(area[-c(1:3)],function(x) as.numeric(x))))\n  names(temperature) <- c('year','step','area','temperature')\n  area <- list(areas=areas,size=size,temperature=temperature)\n  class(area) <- c('gadget.area',class(area))\n  return(area)\n}\n\n##' <description>\n##'\n##' <details>\n##' @title \n##' @param area \n##' @param file \n##' @return \n##' @author Bjarki Thor Elvarsson\nwrite.gadget.area <- function(area,file='area'){\n  header <- sprintf('; time file created in Rgadget\\n; %s - %s',file,date())\n  area.file <-\n    paste(header,\n          paste('areas',paste(area$areas,collapse=' '),sep='\\t'),\n          paste('size',paste(area$size,collapse=' '),sep='\\t'),\n          'temperature',\n          '; year - step - area - temperature',\n          sep='\\n')\n  write(area.file,file=file)\n  write.table(area$temperature,file=file,col.names=FALSE,append=TRUE,\n              quote=FALSE,sep='\\t',row.names=FALSE)\n}\n##' <description>\n##'\n##' <details>\n##' @title \n##' @param time.file \n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.time <- function(time.file='time'){\n  time <- strip.comments(time.file)\n  time.names <- sapply(time,function(x) x[1])\n  time <- sapply(time,function(x) as.numeric(x[-1]))\n  names(time) <- time.names\n  if(sum(time$notimesteps[-1])!=12)\n    warning('Error in timefile - notimesteps does not sum to 12')\n  if(length(time$notimesteps[-1])!=time$notimesteps[1])\n    warning('Error in timefile - notimesteps does not contain the right number of timesteps')\n  time$notimesteps <- time$notimesteps[-1]\n  class(time) <- c('gadget.time',class(time))\n  return(time)\n}\n\n##' <description>\n##'\n##' <details>\n##' @title \n##' @param time \n##' @param file \n##' @return \n##' @author Bjarki Thor Elvarsson\nwrite.gadget.time <- function(time,file='time'){\n  header <- sprintf('; time file created in Rgadget\\n; %s - %s',file,date())\n  time.file <-\n    paste(header,\n          paste('firstyear',time$firstyear,sep='\\t'),\n          paste('firststep',time$firststep,sep='\\t'),\n          paste('lastyear',time$lastyear,sep='\\t'),\n          paste('laststep',time$laststep,sep='\\t'),\n          paste('notimesteps',\n                paste(length(time$notimesteps),\n                      paste(time$notimesteps,collapse=' ')),\n                sep='\\t'),\n          sep='\\n')\n  write(time.file,file=file)\n}\n\n##' Gadget Penalty file\n##' @param file name of the file that is to contain the penalty\nwrite.gadget.penalty <- function(file='penaltyfile'){\n  penalty <- paste(\"; penalty file for the gadget example\",\n                   sprintf('; %s created at %s using Rgadget',file,date()),\n                   \"; switch - power - lower - upper\",\n                   \"default\\t2\\t10000\\t10000 ; defaults\",\n                   sep='\\n')\n  write(penalty,file=file)\n}\n\n\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param params.file \n##' @param bs.wgts \n##' @param bs.samples \n##' @param bs.lik \n##' @param lik.pre \n##' @param params.pre \n##' @param parallel \n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.bootstrap <- function(params.file='params.in',\n                                 bs.wgts='BS.WGTS',\n                                 bs.samples=1:100,\n                                 bs.lik='likelihood',\n                                 lik.pre = 'lik.',\n                                 params.pre = 'params.',\n                                 parallel=FALSE\n                                 ){\n  wgts <- sprintf('%s/BS.%s',bs.wgts,bs.samples)\n  dboot <- read.gadget.wgts(params.file,wgts,\n                            bs.lik,lik.pre,params.pre,parallel)\n  return(dboot)\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param params.file base parameter file\n##' @param wgts location of the reweighting folder\n##' @param likelihood likelihood file\n##' @param lik.pre strings matching the likelihood output\n##' @param params.pre strings matching the parameter estimates\n##' @param parallel should the files be read in parallel\n##' @return data.frame with parameter estimates and likelihood output from the iterative reweighting folder.\n##' @author Bjarki Thor Elvarsson\nread.gadget.wgts <- function(params.file = 'params.in',\n                             wgts = 'WGTS',\n                             likelihood = 'likelihood',\n                             lik.pre = 'lik.',\n                             params.pre = 'params.',\n                             parallel=FALSE){\n  \n  params.in <- read.gadget.parameters(params.file)\n  bs.lik <- read.gadget.likelihood(likelihood)\n  files <- unique(list.files(wgts))\n\n  lik.pre.g <- paste('^',gsub('.','[^a-zA-Z]',lik.pre,fixed=TRUE),sep='')\n  params.pre.g <- paste('^',gsub('.','[^a-zA-Z]',params.pre,fixed=TRUE),sep='')\n  \n  liks <- unique(files[grep(lik.pre.g,files)])\n  comps <- gsub(lik.pre.g,'',liks)\n\n  tmp.func <- function(path){\n    read.gadget.SS <- function(file='lik.out'){\n      lik.out <- read.gadget.lik.out(file)\n\n      if(is.null(lik.out)){\n        SS <- as.data.frame(t(rep(NA,length(bs.lik$weights$weight))))\n        names(SS) <- bs.lik$weights$name\n      } else {\n        SS <- lik.out$data[intersect(bs.lik$weights$name,names(lik.out$data))]\n      }\n      return(SS)\n    }\n    path.f <- list.files(path)\n    liks <- path.f[grep(lik.pre,path.f)]\n    params <- path.f[grep(params.pre.g,path.f)]\n    ldply(intersect(comps,unique(c(gsub(params.pre.g,'',params),\n                                   'init'))),\n          function(x){\n            if(x=='init')\n              tmp <- params.in\n            else\n              tmp <- read.gadget.parameters(sprintf('%s/%s%s',\n                                                    path,params.pre,x))\n            if(is.null(tmp)){\n              tmp <- params.in\n              tmp$value <- NA*tmp$value\n              ss <- as.data.frame(t(rep(NA,length(bs.lik$weights$weight))))\n              names(ss) <- bs.lik$weights$name\n            } else {\n              ss <- read.gadget.SS(sprintf('%s/%s%s',path,lik.pre,x))\n            }\n            optim  <- ldply(attributes(tmp)$optim.info,\n                            function(x) cbind(fake.id=1,x))\n            optim <- reshape(optim,idvar='fake.id',\n                             timevar='.id',direction='wide')\n            optim$fake.id <- NULL\n            dtmp <- cbind(bs.data=tail(unlist(strsplit(path,'/')),1),\n                          comp=x,\n                          t(tmp['value']),\n                          ss,\n                          optim)\n            \n            return(dtmp)\n          }\n          )\n  }\n  dparam <- ldply(wgts,tmp.func,.parallel=parallel)\n  attr(dparam,'init.param') <- params.in\n  return(dparam)\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param wgts \n##' @param comp \n##' @param out.pre \n##' @param parallel \n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.wgtsprint <- function(wgts = 'WGTS',\n                                  comp = 'final',\n                                  out.pre = 'out.',\n                                  parallel = FALSE){\n  bs.print <- llply(sprintf('%s/%s%s',wgts,out.pre,comp),\n                    read.printfiles,.parallel=parallel) \n  names(bs.print) <- comp\n  tmp <- llply(names(bs.print[[1]]),\n               function(x) ldply(bs.print,function(y) y[[x]]),.parallel=TRUE)\n  names(tmp) <- names(bs.print[[1]])\n  return(tmp)\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param bs.wgts \n##' @param bs.samples \n##' @param printfile \n##' @param final \n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.bootprint <- function(bs.wgts='BS.WGTS',\n                                  bs.samples=1:1000,\n                                  printfile='printfile',\n                                  final = 'final'){\n  printfile <- read.gadget.printfile(printfile)\n  run.func <- function(bs.data){\n    path <- sprintf('%s/BS.%s',bs.wgts,bs.data)\n    \n    dir.create(paste(path,sprintf('out.%s',final),sep='/'))\n    main.print <- read.gadget.main(sprintf('%s/main.%s',path,final))\n    main.print$printfiles <- sprintf('%s/print.%s',path,final)\n    write.gadget.main(main.print,sprintf('%s/main.print',path))\n    write.gadget.printfile(printfile,file=sprintf('%s/print.%s',path,final),\n                           output.dir=paste(path,sprintf('out.%s',final),\n                             sep='/'))\n    callGadget(s=1,main=sprintf('%s/main.print',path),\n               i=sprintf('%s/params.%s',path,final),\n               o=sprintf('%s/lik.print',path))\n    out <- read.printfiles(sprintf('%s/out.%s',path,final))\n    return(out)\n  }\n  bs.print <- llply(bs.samples,\n                    run.func,.parallel=TRUE)\n  names(bs.print) <- sprintf('BS.%s',bs.samples)\n  tmp <- llply(names(printfile),function(x) ldply(bs.print,function(y) y[[x]]))\n  names(tmp) <- names(printfile)\n  return(tmp)\n}\n\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param txt \n##' @return \n##' @author Bjarki Thor Elvarsson\nmerge.formula <- function(txt){\n  openP <- grep('(',txt,fixed=TRUE)\n  closeP <- grep(')',txt,fixed=TRUE)\n  if(length(openP) + length(closeP) == 0)\n    return(txt)\n  \n  if(length(openP) != length(closeP))\n    stop('numbers of paranthesis dont match in gadget formula')\n\n  braces <- data.frame(begin=openP,end=closeP,group=openP)\n  for(i in 1:length(openP)){\n    braces$end[i] <- closeP[i]\n    braces$begin[i] <- openP[max(which(openP < closeP[i]))]\n    openP[max(which(openP < closeP[i]))] <- length(txt)\n  }\n  braces <- arrange(braces, begin)\n  for(i in 1:length(openP)){\n    braces$group[braces$end<braces$end[i] & braces$end>braces$begin[i]] <-\n      braces$group[i]\n  }\n\n  braces <- ddply(braces,'group',function(x) head(x,1))\n  for(i in length(braces$group):1){\n    txt[braces$begin[i]] <- paste(txt[braces$begin[i]:braces$end[i]],\n                                  collapse=' ')\n    txt <- txt[-c((braces$begin[i]+1):braces$end[i])]\n  }\n  return(txt)\n}\n\n\n\n##' Evaluate gadget formulas, which are in reverse polish notation, ie\n##' '(* x y)' which is equivalent to 'x*y'. The evaluation supports the following\n##' symbols '*','/','+','-','exp','log','sqrt'. The evaluation uses a gadget\n##' parameter object for its evaluation.\n##' @title eval.gadget.formula\n##' @param gad.for gadget formula\n##' @param par gadget parameters object\n##' @return a vector of evaluated gadget formulas\n##' @author Bjarki Thor Elvarsson\neval.gadget.formula <- function(gad.for,par){\n  tmp <- strsplit(gsub(')',' )',gsub('(','',gad.for,fixed=TRUE)),' ')  \n  ldply(tmp,\n        function(x){\n          x <- x[!x=='']\n          par.ind <- grep('#',x,fixed=TRUE)\n          x <- gsub(\"*\",\"'*'(\",x,fixed=TRUE)\n          x <- gsub(\"/\",\"'/'(\",x,fixed=TRUE)\n          x <- gsub(\"+\",\"'+'(\",x,fixed=TRUE)\n          x <- gsub(\"- \",\"'-'(\",x,fixed=TRUE)\n          x <- gsub('exp','exp(',x,fixed = TRUE)\n          x <- gsub('log','log(',x,fixed = TRUE)\n          x <- gsub('sqrt','sqrt(',x,fixed = TRUE)\n          x <- gsub('[0-9]+.[0-9]+#|[0-9]+#','#',x)\n          x[par.ind] <- par[gsub('#','',x[par.ind],fixed=TRUE),'value']          \n          x <- gsub(',)',')',gsub('(,','(',paste(x,collapse=','),fixed=TRUE),\n                    fixed=TRUE)\n          return(eval(parse(text=x)))\n        })\n}\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title read.gadget.table\n##' @param file path to file\n##' @param header logical, should the header be read from the file\n##' @return data.frame with \n##' @author Bjarki Thor Elvarsson\nread.gadget.table <- function(file,header=FALSE){\n  dat <- strip.comments(file)\n  if(class(dat) == 'list')\n    gad.tab <- ldply(dat,merge.formula)\n  else {\n    gad.tab <- adply(dat,2,merge.formula)\n    gad.tab$X1 <- NULL\n  }\n  if(header){\n    comments <- attr(dat,'comments')\n    header <- tail(comments,1)\n    ## unfinised business\n  }\n\n  return(gad.tab)\n}\n\n##' <description>\n##'\n##' function only tested for linear and totalfleets>\n##' @title \n##' @param fleet.file \n##' @return \n##' @author Bjarki Þór Elvarsson\nread.gadget.fleet <- function(fleet.file='fleet'){\n  fleet <- strip.comments(fleet.file)\n  comp.loc <- grep('fleetcomponent',fleet)\n  suit.loc <- grep('suitability',fleet)\n  fleet.dat <-\n    data.frame(fleet = laply(fleet[comp.loc+1],function(x) x[2]),\n               type = laply(fleet[comp.loc+1],function(x) x[1]),\n               livesonareas = laply(fleet[comp.loc+2],\n                 function(x) paste(x[-1],collapse=' ')),\n               multiplicative = laply(fleet[comp.loc+3],\n                 function(x) as.numeric(x[2])),\n               amount =  laply(fleet[c(comp.loc[-1]-1,\n                 length(fleet))],\n                 function(x) x[2]),\n               stringsAsFactors=FALSE\n               )\n  diff.suit <- data.frame(fleet=laply(fleet[comp.loc+1],function(x) x[2]),\n                          begin=suit.loc+1,\n                          end=c(comp.loc[-1]-2,length(fleet)-1))\n  prey <- ddply(diff.suit,'fleet',\n                function(x){\n                  ldply(fleet[x$begin:x$end],\n                        function(x)\n                        c(stock=x[1],suitability=x[3],\n                          params=paste(tail(x,-3),collapse=' ')))\n                  \n                })\n  return(list(fleet=fleet.dat,prey=prey))\n}\n\n##' <description>\n##'\n##' <details>\n##' @title \n##' @param fleet \n##' @param file \n##' @return \n##' @author Bjarki Þór Elvarsson\nwrite.gadget.fleet <- function(fleet,file='fleet'){\n  base.text <-\n    paste('[fleetcomponent]',\n          '%s\\t%s',\n          'livesonareas\\t%s',\n          'multiplicative\\t%s',\n          'suitability',\n          '%s',\n          'amount\\t%s',\n          sep='\\n')\n\n  suit.text <- ddply(fleet$prey,'fleet',\n                     function(x){\n                       c(suitability=paste(x$stock,'function',\n                           x$suitability,x$params,\n                           sep='\\t', collapse='\\n'))\n                     })\n  tmp <- merge(fleet$fleet,suit.text,by='fleet')\n  tmp$suitability <- ifelse(tmp$type=='quotafleet',\n                            paste(tmp$suitability,\n                                  sprintf('quotafunction\\t%s\\nbiomasslevel\\t%s\\nquotalevel\\t%s\\nselectstocks\\t%s',\n                                          tmp$quotafunction,tmp$biomasslevel,\n                                          tmp$quotalevel,\n                                          tmp$selectstocks),\n                                  sep='\\n'),\n                            tmp$suitability)\n  \n  write(sprintf(base.text,tmp$type,tmp$fleet,tmp$livesonareas,\n                tmp$multiplicative,tmp$suitability, tmp$amount),\n        file=file)\n  \n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param fleets \n##' @param params \n##' @param lengths \n##' @param normalize \n##' @return \n##' @author Bjarki Thor Elvarsson\nget.gadget.suitability <- function(fleets,params,lengths,normalize=FALSE){\n  ddply(fleets$prey,~fleet+stock,\n        function(x){\n          txt.split <- merge.formula(unlist(strsplit(x$params[1],' ')))\n          suit.par <- eval.gadget.formula(txt.split,params)$V1\n          suitability(suit.par,l = lengths, type = x$suitability,\n                      to.data.frame = TRUE, normalize = normalize)\n        })\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param stocks \n##' @param params \n##' @param dt \n##' @param age.based \n##' @return \n##' @author Bjarki Thor Elvarsson\nget.gadget.growth <- function(stocks,params,dt=0.25,age.based=FALSE){\n  ldply(stocks,function(x){\n    txt.split <- merge.formula(unlist(strsplit(x@growth@growthparameters,' ')))\n    txt.split <- c(txt.split,x@growth@beta,x@growth@maxlengthgroupgrowth)\n    suit.par <- eval.gadget.formula(txt.split,params)$V1\n    lt <- getLengthGroups(x)\n    if(age.based){\n      age <- x@minage:x@maxage\n      data.frame(stock=x@stockname,age=age,\n                 length=suit.par[1]*(1-exp(-suit.par[2]*age)))\n    } else {\n      melt(growthprob(lt,suit.par[5],suit.par[1],suit.par[2],dt,\n                      suit.par[6],max(diff(lt))),\n           varnames = c('lfrom','lto','lgrowth'))\n    }\n  })\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param stocks \n##' @param params \n##' @return \n##' @author Bjarki Thor Elvarsson\nget.gadget.recruitment <- function(stocks,params){\n  ldply(stocks, function(x){\n    if(x@doesrenew == 1){\n      na.omit(data.frame(stock = x@stockname,\n                         year=x@renewal.data$V1,\n                         recruitment =\n                         10000*unlist(eval.gadget.formula(x@renewal.data$V5,\n                                                          params))))\n    } else {\n      data.frame(stock = x@stockname,year=NA,recruitment=NA)\n    }\n  })\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param fleets \n##' @param params \n##' @return \n##' @author Bjarki Thor Elvarsson\nget.gadget.catches <- function(fleets,params){\n  tmp <- ddply(fleets$fleet,~fleet,\n               function(x){\n                 subset(read.gadget.table(x$amount),\n                        V4 == x$fleet)\n               })\n  tmp$fleet <- NULL\n  names(tmp) <- c('year','step','area','fleet','catch')\n  tmp <- merge(merge(fleets$prey[c('fleet','stock')],tmp),\n               fleets$fleet[c('fleet','type')])\n  tmp$catch <- unlist(eval.gadget.formula(tmp$catch,params))\n  return(tmp)\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param lik \n##' @param wgts \n##' @return \n##' @author Bjarki Thor Elvarsson\nread.gadget.grouping <- function(lik = read.gadget.likelihood(),\n                                 wgts = 'WGTS'){\n  lik.tmp <- subset(lik$weights,\n                    !(type %in% c('penalty','understocking',\n                                  'migrationpenalty')))\n  \n  tmp <-\n    ldply(lik.tmp$name,\n          function(x){\n            text <- gsub('params.','',\n                        grep('params',list.files(wgts),value = TRUE))\n            x1 <- gsub('.','\\\\.',x,fixed=TRUE)\n            x1 <- paste('(',x1,'[[:punct:]]','|',x1,'$)',sep='')  \n            pos <- grep(x1,text)            \n            data.frame(name = x,\n                       pos = pos,\n                       ord = regexpr(x,text[pos])[1],\n                       stringsAsFactors=FALSE)\n          })\n  tmp <- arrange(tmp,pos,ord)\n  grouping <- dlply(tmp,~pos,function(x) as.character(x$name))\n  names(grouping) <- unlist(llply(grouping,function(x) paste(x,collapse='.')))\n  attributes(grouping)$split_labels <- NULL\n  return(grouping)\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param wgts \n##' @param main.file \n##' @param fleet.predict \n##' @param mat.par \n##' @return \n##' @author Bjarki Thor Elvarsson\ngadget.fit <- function(wgts = 'WGTS', main.file = 'main',\n                       fleet.predict = data.frame(fleet='comm',ratio=1),\n                       mat.par=NULL){\n\n  resTable <- read.gadget.results(wgts=wgts)\n  nesTable <- read.gadget.results(wgts=wgts,normalize = TRUE)\n  params <- read.gadget.parameters(sprintf('%s/params.final',wgts))\n  lik <- read.gadget.likelihood(sprintf('%s/likelihood.final',wgts))\n  lik.dat <- read.gadget.data(lik)\n  \n  ## model output, i.e printfiles\n  make.gadget.printfile(main = main.file,\n                        file = sprintf('%s/printfile.fit',wgts),\n                        out = sprintf('%s/out.fit',wgts),\n                        aggfiles = sprintf('%s/print.aggfiles',wgts))\n  main <- read.gadget.main(file = main.file)\n  main$printfiles <- sprintf('%s/printfile.fit',wgts)\n  write.gadget.main(main,file = sprintf('%s/main.print',wgts))\n  callGadget(s=1,\n             i = sprintf('%s/params.final',wgts),\n             main = sprintf('%s/main.print',wgts))\n  out <- read.printfiles(sprintf('%s/out.fit',wgts))\n\n  stocks <- read.gadget.stockfiles(main$stockfiles)\n  fleets <- read.gadget.fleet(main$fleetfiles)\n  catches <- get.gadget.catches(fleets,params)\n  gss.suit <- ldply(stocks,\n                    function(x){\n                      get.gadget.suitability(fleets,params,\n                                             getLengthGroups(x))\n                    })\n  stock.growth <- get.gadget.growth(stocks,params,age.based=TRUE)\n  stock.recruitment <- get.gadget.recruitment(stocks,params)\n\n  harv.suit <- function(l){\n    ddply(merge(get.gadget.suitability(fleets,params,l),fleet.predict),~l,\n          summarise, harv=sum(ratio*suit))$harv\n  }\n  \n  ## merge data and estimates\n  if('surveyindices' %in% names(lik.dat$dat)){\n    sidat <- ldply(names(lik.dat$dat$surveyindices),\n                   function(x){\n                     sidat <-\n                       merge(lik.dat$dat$surveyindices[[x]],\n                             out[[x]],\n                             by.y=c('year','label','step','area'),\n                             by.x=c('year','length','step','area'),\n                             all.y=TRUE)\n                     sidat$length <- paste(sidat$lower,\n                                           sidat$upper, sep = ' - ')\n                     sidat$name <- x\n                     sidat <- merge(sidat,\n                                    subset(lik$surveyindices,\n                                           select=c(name,stocknames)),\n                                    by='name')\n                     return(sidat)\n                   })\n  } else {\n    sidat <- NULL\n  }\n\n\n\n  if('catchdistribution' %in% names(lik.dat$dat)){\n    catchdist.fleets <-\n      ldply(names(lik.dat$dat$catchdistribution),\n            function(x){\n\n              ldist <-\n                merge(lik.dat$dat$catchdistribution[[x]],\n                      out[[x]],\n                      by=c('length', 'year',\n                        'step', 'area','age'),\n                      all.y=TRUE)\n              ldist$name <- x\n              ldist$age <- as.character(ldist$age)\n              ldist$area <- as.character(ldist$area)\n              ldist <-\n                data.table(ldist) %>%\n                  group_by(year, step,  area, add=FALSE) %>%\n                  mutate(total.catch = sum(number.x,na.rm=TRUE),\n                         total.pred = sum(number.y,na.rm=TRUE),\n                         observed = number.x/sum(number.x,na.rm=TRUE),\n                         predicted = number.y/sum(number.y,na.rm=TRUE)) %>%\n                  group_by(length,age,add=FALSE) %>%\n                  mutate(upper = (max(ifelse(is.na(upper),0.0,\n                                             upper))),\n                         lower = (max(ifelse(is.na(lower),0.0,\n                                             lower))),\n                         avg.length = as.numeric((lower+upper)/2),\n                         residuals = as.numeric(observed - predicted))\n              ldist <- merge(ldist,\n                             subset(lik$catchdistribution,\n                                    select=c(name,fleetnames,stocknames)),\n                             by = 'name')          \n              return(ldist)\n            })\n  } else {\n    catchdist.fleets <- NULL\n  }\n\n\n  if(sum(grepl('.std',names(out),fixed = TRUE))>0){\n    res.by.year <- \n      ldply(laply(stocks,function(x) x@stockname),function(x){\n        f.by.year <- ddply(subset(out[[sprintf('%s.std',x)]],\n                                  step == 1 & year < 2014), #### ATH!!!!\n                           ~year,\n                           summarise,\n                           F=max(Z-0.15,na.rm=TRUE)) ### ATH!!!!!!!!\n        bio.by.year <- ddply(subset(out[[sprintf('%s.full',x)]],\n                                    step == 1),\n                             ~year + area,\n                             plyr::here(summarise),\n                             total.biomass = sum(number*mean.weight),\n                             harv.biomass =\n                             sum(mean.weight*\n                                 harv.suit(as.numeric(gsub('len','',length)))*\n                                 number),\n                             ssb = sum(mean.weight*logit(mat.par[1],\n                               mat.par[2],as.numeric(gsub('len','',length)))*\n                             number))\n        \n        bio <- merge(f.by.year,bio.by.year)\n        bio$stock <- x\n        return(bio)\n      })\n    res.by.year <- merge(res.by.year,stock.recruitment,all.x = TRUE)\n    annual.catch <- ddply(catches,~year+stock, summarise,\n                          catch = sum(catch))\n                          \n    res.by.year <- merge(res.by.year,\n                         annual.catch,all.x = TRUE)\n  } else {\n    res.by.year <- NULL\n  }\n\n#  if('catchinkilos' %in% names(lik.dat$dat)){\n#    catchdist <-\n#      ldply(names(lik.dat$dat$catchinkilos),\n#            function(x){\n#              \n#            }\n#  }\n  \n  if('stockdistribution' %in% names(lik.dat$dat)){\n    stockdist <-\n      ldply(names(lik.dat$dat$stockdistribution),\n            function(x){\n              stockdist <-\n                merge(lik.dat$dat$stockdistribution[[x]],\n                      out[[x]],\n                      by=c('length', 'year',\n                        'step', 'area','age','stock'),\n                      all.y=TRUE)\n              len.agg <-  tryCatch(read.table(lik$stockdistribution$lenaggfile,\n                                              stringsAsFactors=FALSE,\n                                              comment.char=';'),\n                                   warning = function(x) NULL,\n                                   error = function(x) NULL)\n              names(len.agg)[1:3] <- c('length','agg.lower','agg.upper')\n              stockdist <- merge(stockdist,len.agg)\n              stockdist$name <- x\n              stockdist <- data.table(stockdist)\n              stockdist <-\n                stockdist[,c('obs.ratio','pred.ratio','upper',\n                             'lower','avg.length') :=\n                          list(obs.ratio = number.x/sum(number.x,na.rm=TRUE),\n                               pred.ratio = number.y/sum(number.y),\n                               upper = max(ifelse(is.na(upper),\n                                 agg.upper,upper)),\n                               lower = max(ifelse(is.na(lower),\n                                 agg.lower,lower)),\n                               length2 = (lower+upper)/2),\n                          by = list(year, step, area, age, length)]\n              stockdist <- stockdist[,c('agg.upper','agg.lower'):=NULL,]\n              stockdist <- merge(stockdist,\n                                 subset(lik$stockdistribution,\n                                        select=c(name,fleetnames,stocknames)),\n                                 by='name')\n              return(stockdist)\n            })\n  } else {\n    stockdist <- NULL\n  }\n\n \n  out <- list(sidat = sidat, resTable = resTable, nesTable = nesTable,\n              suitability = gss.suit, stock.growth = stock.growth,\n              stock.recruiment = stock.recruitment, \n              res.by.year = res.by.year,\n              catchdist.fleets = catchdist.fleets, stockdist = stockdist)\n\n  save(out,file=sprintf('%s/WGTS.Rdata',wgts))\n  return(out)\n}\n\n##' .. content for \\description{} (no empty lines) ..\n##'\n##' .. content for \\details{} ..\n##' @title \n##' @param main \n##' @param dparam.file \n##' @param bsprint.file \n##' @param fleet.predict \n##' @param mat.par \n##' @param .parallel \n##' @return \n##' @author Bjarki Thor Elvarsson\ngadget.bootfit <- function(main = 'main', dparam.file = 'bsres_v1.RData',\n                           bsprint.file = 'bsprint.RData',\n                           fleet.predict = data.frame(fleet='comm',ratio=1),\n                           mat.par=NULL, .parallel = TRUE\n                           ){\n\n\n  load(dparam.file)\n  load(bsprint.file)\n  main <- read.gadget.main(main)\n  lik <- read.gadget.likelihood(main$likelihoodfiles)\n  lik.dat <- read.gadget.data(lik)\n\n  fleets <- read.gadget.fleet(main$fleetfiles)\n  stocks <- read.gadget.stockfiles(main$stockfiles)\n  dfinal <- subset(dparam,comp=='final')\n  dfinal$comp <- NULL\n  boot.rec <-\n    ddply(melt(dfinal,id.vars='bs.data',variable.name = 'switch'),\n          ~bs.data,function(x){\n            rownames(x) <- x$switch\n            get.gadget.recruitment(stocks,x)\n          })\n  boot.sel <-\n    ddply(melt(dfinal,id.vars='bs.data',variable.name = 'switch'),\n          ~bs.data,function(x){\n            rownames(x) <- x$switch\n            get.gadget.suitability(fleets,x,getLengthGroups(stocks[[1]]))\n          })\n  boot.growth <- \n    ddply(melt(dfinal,id.vars='bs.data',variable.name = 'switch'),\n          ~bs.data,function(x){\n            rownames(x) <- x$switch\n            get.gadget.growth(stocks,x,age.based = TRUE)\n          })\n\n#  boot.ldistfit <-\n#    rbindlist(llply(names(lik.dat$dat$catchdistribution),\n#                    function(x){\n#                      si <-\n#                        data.table(noageprint[[x]]) %.%\n#                        group_by(.id,year,step,area) %.%\n#                        mutate(proportion = number/sum(number)) %.%\n#                        group_by(year,step,age,length,add=FALSE) %.%\n#                        summarise(upper = quantile(proportion,0.975,na.rm=TRUE),\n#                                  lower = quantile(proportion,0.025,na.rm=TRUE))\n#                      si$fleet <- x\n#                      return(si)\n#                    }))\n  \n  harv.suit <- function(l, .id){\n    x <- subset(melt(dfinal,id.vars='bs.data',variable.name = 'switch'),\n                bs.data == .id)\n    rownames(x) <- x$switch\n    ddply(merge(get.gadget.suitability(fleets,x,l),fleet.predict),~l,\n          summarise, harv=sum(ratio*suit))$harv\n  }\n  \n  res.by.year <- \n    ldply(laply(stocks,function(x) x@stockname),function(x){\n      f.by.year <- ddply(bsprint[[sprintf('%s.std',x)]],\n                         ~year + .id,\n                         summarise,\n                         F=max(Z-0.15,na.rm=TRUE)) ### ATH!!!!!!!!\n      ## making sure this works for a relic from the good old times:)\n      txt <- ifelse(sum(grepl('.full',names(bsprint),fixed=TRUE))==1,\n                    sprintf('%s.full',x), sprintf('%s.lw',x))  \n      \n      bio.by.year <- ddply(subset(bsprint[[txt]],\n                                  step == 1),\n                           ~year + area + .id,\n                           plyr::here(summarise),\n                           total.biomass = sum(number*mean.weight),\n                           harv.biomass =\n                           sum(mean.weight*\n                               harv.suit(as.numeric(gsub('len','',length)),\n                                         .id[1])*\n                               number),\n                           ssb = sum(mean.weight*logit(mat.par[1],\n                             mat.par[2],as.numeric(gsub('len','',length)))*\n                             number),\n                           .parallel = .parallel)\n      \n      bio <- merge(f.by.year,bio.by.year)\n      bio$stock <- x\n      return(bio)\n    })\n  res.by.year <- merge(res.by.year,boot.rec,all.x = TRUE)\n  boot.fit <- list(bootparams = dfinal,res.by.year = res.by.year,\n                   boot.rec = boot.rec, boot.sel = boot.sel,\n                   boot.growth = boot.growth)\n  save(boot.fit,file='digestedBoot.RData')\n  invisible(boot.fit)\n}\n",
    "created" : 1410554424620.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2905198838",
    "id" : "4321E676",
    "lastKnownWriteTime" : 1410905821,
    "path" : "~/Documents/rgadget/trunk/gadgetFileIO.R",
    "project_path" : "trunk/gadgetFileIO.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}