{
    "contents" : "##' Calculates the survey indices for the simulated stocks. \n##' @title Survey indices\n##' @param sim Results from a Rgadget simulation\n##' @param sigma sigma for a log-normal noise for the indicies\n##' @return Dataframe with the survey indices \n##' @author Bjarki Þór Elvarsson\nsurvey.index <- function(sim,sigma=0){\n  ##Calculates the total catch  \n  opt <- sim$opt\n  Index <- rbind(as.data.frame.table(sim$immNumRec,stringsAsFactors=FALSE),\n                 as.data.frame.table(sim$matNumRec,stringsAsFactors=FALSE))\n  Index$year <- sapply(strsplit(Index$time,'_'),\n                       function(x) as.numeric(x[2]))\n  Index$step <- sapply(strsplit(Index$time,'_'),\n                          function(x) as.numeric(x[4]))\n  Index <- Index[Index$step==opt$survstep,]\n  SurveyAgg <- aggregate(Index$Freq,\n                         by=list(\n                           year=Index$year,\n                           step=Index$step,\n                           area=sprintf('area%s',Index$area),\n                           age=ifelse(Index$age==1,'age1','ageother')),\n                         sum)\n  \n  names(SurveyAgg)[5] <- 'index'\n  temp <- exp(rnorm(opt$numobs,0,sigma^2)-sigma^2/2)\n  SurveyAgg$index <- SurveyAgg$index*temp\n  \n  SurveyAgg$time <- SurveyAgg$year+(SurveyAgg$step - 1)/opt$numoftimesteps\n  \n  class(SurveyAgg) <- c('Rgadget',class(SurveyAgg))\n  attr(SurveyAgg,'formula') <- index~time|area\n  attr(SurveyAgg,'plotGroups') <- 'age'\n  attr(SurveyAgg,'plotType') <- 'l'\n  attr(SurveyAgg,'xaxis') <- 'Year'\n  attr(SurveyAgg,'yaxis') <- 'Survey Index'\n  attr(SurveyAgg,'plotFun') <- 'xyplot'  \n  return(SurveyAgg)\n}\n##' Calculate the survey length index based on the provided lengthgroups\n##' @title Survey length index\n##' @param sim Results from a Rgadget simulation\n##' @param length.groups A vector of cutoff points for the length groups\n##' @param sigma sigma for a log-normal error\n##' @return Dataframe containing the length index from the \n##' @author Bjarki Þór Elvarsson\nsurvey.indexlen <- function(sim,length.groups=c(4,14,90),sigma=0){\n  opt <- sim$opt\n  Index <- rbind(as.data.frame.table(sim$immNumRec,stringsAsFactors=FALSE),\n                 as.data.frame.table(sim$matNumRec,stringsAsFactors=FALSE))\n  Index$year <- sapply(strsplit(Index$time,'_'),\n                       function(x) as.numeric(x[2]))\n  Index$step <- sapply(strsplit(Index$time,'_'),\n                       function(x) as.numeric(x[4]))\n  Index <- Index[Index$step==opt$survstep,]\n  Index$length <- as.numeric(Index$length)\n  Index$length.group <- cut(Index$length,\n                            breaks=length.groups,\n                            labels=sprintf('lengp%s',\n                              1:(length(length.groups)-1)))\n  IndexLen <- aggregate(Index$Freq,\n                        by=list(\n                          year=Index$year,\n                          step=Index$step,\n                          area=sprintf('area%s',Index$area),\n                          length.group=Index$length.group),\n                        sum)\n  names(IndexLen)[5] <- 'index'\n  IndexLen$x <- IndexLen$index*exp(rnorm(length(IndexLen$index),0,\n                                     sigma^2) - sigma^2/2)\n  \n  IndexLen$time <- IndexLen$year+(IndexLen$step - 1)/opt$numoftimesteps\n  \n  class(IndexLen) <- c('Rgadget',class(IndexLen))\n  attr(IndexLen,'formula') <- index~time|area\n  attr(IndexLen,'plotGroups') <- 'length.group'\n  attr(IndexLen,'plotType') <- 'l'\n  attr(IndexLen,'xaxis') <- 'Year'\n  attr(IndexLen,'yaxis') <- 'Survey Length Index'\n  attr(IndexLen,'plotFun') <- 'xyplot'\n  return(IndexLen)\n}\n\n##' Calculate the length distribution from the fleet by length groups and time.\n##' @title Length Dist \n##' @param sim Results from a Rgadget simulation\n##' @param sigma sigma for a lognormal noise\n##' @return Dataframe containing the fleet length distribution.\n##' @author Bjarki Þór Elvarsson\nlengthDist <- function(sim,sigma=0){\n  opt <- sim$opt\n  tmp.surv <- rbind(as.data.frame.table(sim$immCsurv,stringsAsFactors=FALSE),\n                    as.data.frame.table(sim$matCsurv,stringsAsFactors=FALSE))\n  tmp.comm <- rbind(as.data.frame.table(sim$immCcomm,stringsAsFactors=FALSE),\n                    as.data.frame.table(sim$matCcomm,stringsAsFactors=FALSE))\n  tmp.surv$fleet <- 'surv'\n  tmp.comm$fleet <- 'comm'\n  Index <- rbind(tmp.surv,tmp.comm)\n  Index$year <- sapply(strsplit(Index$time,'_'),\n                          function(x) as.numeric(x[2]))\n  Index$step <- sapply(strsplit(Index$time,'_'),\n                          function(x) as.numeric(x[4]))\n  Index <- Index[Index$fleet=='comm'|Index$step==opt$survstep,]\n  IndexLen <- aggregate(Index$Freq,\n                         by=list(\n                           year=Index$year,\n                           step=Index$step,\n                           area=sprintf('area%s',Index$area),\n                           age=rep('allages',length(Index$year)),\n                           length=as.numeric(Index$length),\n                           fleet=Index$fleet),                           \n                         sum)\n  IndexLen$x <- IndexLen$x*exp(rnorm(length(IndexLen$x),0,\n                                     sigma^2) - sigma^2/2)\n  IndexLen$time <- IndexLen$year+(IndexLen$step - 1)/opt$numoftimesteps\n  class(IndexLen) <- c('Rgadget',class(IndexLen))\n  attr(IndexLen,'formula') <- x~length|as.ordered(year)+as.factor(area):as.factor(fleet)\n  attr(IndexLen,'plotGroups') <- 'step'\n  attr(IndexLen,'plotType') <- 'l'\n  attr(IndexLen,'xaxis') <- 'Year'\n  attr(IndexLen,'yaxis') <- 'Length Index'\n  attr(IndexLen,'plotFun') <- 'xyplot'\n  \n  return(IndexLen)\n}\n##' Calculates the age-length-key for the survey and commercial fleet.\n##' @title Age length key\n##' @param sim Results from a Rgadget simulation\n##' @param age.agg The desired age aggregation\n##' @param len.agg The desired length aggregation\n##' @return Dataframe containing the age - length key\n##' @author Bjarki Þór Elvarsson\nage.length.key <- function(sim,age.agg,len.agg){\n   ## age length table\n  opt <- sim$opt\n  alk.table <- function(catch,age.agg,len.agg){\n    catch.table <- as.data.frame.table(catch,stringsAsFactors=FALSE)\n    catch.table$year <- sapply(strsplit(catch.table$time,'_'),\n                               function(x) as.numeric(x[2]))\n    catch.table$step <- sapply(strsplit(catch.table$time,'_'),\n                               function(x) as.numeric(x[4]))\n    catch.table$age.agg <-\n      ordered(1 + round((as.numeric(catch.table$age) - opt$minage)/age.agg))\n    levels(catch.table$age.agg) <- paste('age',\n                                         levels(catch.table$age.agg),\n                                         sep='')\n    catch.table$length.agg <-\n      ordered(1 + round((as.numeric(catch.table$length) - opt$minlen)/len.agg))\n    levels(catch.table$length.agg) <- paste('len',\n                                            levels(catch.table$length.agg),\n                                            sep='')\n    tmp <- aggregate(catch.table$Freq,\n                     by=list(\n                       year=catch.table$year,\n                       step=catch.table$step,\n                       area=paste('area',catch.table$area,sep=''),\n                       age=catch.table$age.agg,\n                       length=catch.table$length.agg),\n                     sum)    \n    if(len.agg==(opt$maxlen-opt$minlen))\n      tmp$length <- ordered('alllen')\n    if(age.agg==(opt$maxage))\n      tmp$age <- ordered('allages')\n    return(tmp)\n  }\n\n  immComm <- alk.table(sim$immCcomm,\n                       age.agg,\n                       len.agg)\n  matComm <- alk.table(sim$matCcomm,\n                       age.agg,\n                       len.agg)\n  immSurv <- alk.table(sim$immCsurv,\n                       age.agg,\n                       len.agg)\n  matSurv <- alk.table(sim$matCsurv,\n                       age.agg,\n                       len.agg)\n  comm <- merge(immComm,matComm,\n                by=c('year','step','area','length','age'),\n                all=TRUE,\n                suffixes=c('imm','mat'))\n  comm$ximm[is.na(comm$ximm)] <- 0\n  comm$xmat[is.na(comm$xmat)] <- 0\n  comm$total.catch <- comm$ximm + comm$xmat\n  comm <- comm[!(comm$total.catch==0),]\n  comm$ximm <- NULL\n  comm$xmat <- NULL\n  comm$fleet <- 'comm'\n  surv <- merge(immSurv,matSurv,\n                by=c('year','step','area','length','age'),\n                all=TRUE,\n                suffixes=c('imm','mat'))\n  surv$ximm[is.na(surv$ximm)] <- 0\n  surv$xmat[is.na(surv$xmat)] <- 0\n  surv$total.catch <- surv$ximm + surv$xmat\n  surv <- surv[!(surv$total.catch==0),]\n  surv$ximm <- NULL\n  surv$xmat <- NULL\n  surv$fleet <- 'surv'\n  alk <- rbind(surv,comm)\n\n  alk$time <- alk$year + (alk$step-1)/4\n  class(alk) <- c('Rgadget',class(alk))\n  attr(alk,'formula') <- total.catch~as.numeric(age)+as.numeric(length)|as.ordered(time) + as.factor(area):as.factor(fleet)\n  attr(alk,'plotGroups') <- ''\n  attr(alk,'plotType') <- ''\n  attr(alk,'xaxis') <- 'Year'\n  attr(alk,'yaxis') <- 'Age - Length - Key'\n  attr(alk,'plotFun') <- 'contour'\n  attr(alk,'layout') <- ''\n  return(alk)\n\n}\n##' Calculates the overall weigth of the catches by time step and area.\n##' @title Catch in Kilos \n##' @param sim Results from a Rgadget simulation\n##' @return Dataframe with the catch in kilos by timestep and ared.\n##' @author Bjarki Þór Elvarsson\ncatch.in.kilos <- function(sim){\n  opt <- sim$opt\n  commAmount <- apply(apply(sim$immCcomm,c(1,3,4),\n                            function(x) opt$w*x),\n                      c(2,4),sum) +\n                        apply(apply(sim$matCcomm,c(1,3,4),\n                                    function(x) opt$w*x),\n                              c(2,4),sum)\n  commAmount <- as.data.frame.table(commAmount,stringsAsFactors=FALSE)\n  commAmount$year <- sapply(strsplit(commAmount$time,'_'),\n                          function(x) as.numeric(x[2]))\n  commAmount$step <- sapply(strsplit(commAmount$time,'_'),\n                          function(x) as.numeric(x[4]))\n  commAmount$time <- commAmount$year+(commAmount$step - 1)/opt$numoftimesteps\n  commAmount <- commAmount[commAmount$Freq!=0,]\n  commAmount$area <- sprintf('area%s',commAmount$area)\n  commAmount$fleet <- 'comm'\n  commAmount <- commAmount[c('year','step','area','fleet','Freq','time')]\n  names(commAmount)[5] <- 'catch.in.kilos'\n\n  class(commAmount) <- c('Rgadget',class(commAmount))\n  attr(commAmount,'formula') <- catch.in.kilos~time|area\n  attr(commAmount,'plotGroups') <- ''\n  attr(commAmount,'plotType') <- 'l'\n  attr(commAmount,'xaxis') <- 'Year'\n  attr(commAmount,'yaxis') <- 'Catch in kilos'\n  attr(commAmount,'plotFun') <- 'xyplot'\n  attr(commAmount,'layout') <- ''\n  return(commAmount)\n}\n##' Plot the results from the summary functions of the Rgadget simulation.\n##' @title Plot Rgadget\n##' @param dat A Rgadget object\n##' @author Bjarki Þór Elvarsson\nplot.Rgadget <- function(dat,compare.alk=TRUE){\n  if(attr(dat,'plotFun')=='contour'){\n    plot <- contourplot(attr(dat,'formula'),\n                        labels=FALSE,\n                        data=dat,\n                        ylab=attr(dat,'yaxis'),\n                        xlab=attr(dat,'xaxis'),\n                        cuts=15,\n                        scales=list(x=list(rot=45),y=list(rot=45)),\n                        layout=attr(dat,'layout'),\n                        strip=FALSE)\n  } else {\n    if(attr(dat,'plotGroups')!=''){\n      dat$plotGroups <- dat[[attr(dat,'plotGroups')]]\n      key <- list(points=FALSE,lines=TRUE,\n                     title=attr(dat,'plotGroups'),space='right')\n    } else {\n      dat$plotGroups <- ''\n      key <- FALSE\n    }\n    plot <- xyplot(attr(dat,'formula'),\n                   data=dat,\n                   groups=plotGroups,\n                   type=attr(dat,'plotType'),\n                   plot.points=FALSE,\n                   auto.key = key,\n                   ylab=attr(dat,'yaxis'),\n                   xlab=attr(dat,'xaxis'),\n                   scales=list(x=list(rot=45),y=list(rot=45)),\n                   ref=TRUE,\n                   strip=FALSE) \n  }\n  if(length(dim(plot))==2){\n    print(useOuterStrips(plot))\n  } else {\n    print(plot)\n  }\n    \n}\n\n##' summary of the simulation defined by gadget.options\n##' @title Summary of gadget.options\n##' @param opt gadget.options list\nsummary.gadget.options <- function(opt){\n  summary.text <- paste('Summary of gadget options:',\n                        '',\n                        sprintf('There are %s years split into %s steps',\n                                opt$numobs,opt$numoftimesteps),\n                        sprintf('Area(s):\\t%s',paste(1:opt$numofareas,\n                                                     collapse=' ')),\n                        sprintf('Areasize:\\t%s',opt$areasize),\n                        '',\n                        'Stocks',\n                        '',\n                        '- Immature stock',\n                        sprintf('- Ages between %s and %s',\n                                opt$immminage, opt$immmaxage),\n                        sprintf('- Lengths between %s and %s',\n                                opt$minlen,opt$maxlen),\n                        sprintf('- Length-weight relationship %s*l^%s',opt$a,opt$b),\n                        sprintf('- Von Bertanlanffy growth parameters: lsup = %s and k = %s',\n                                opt$lsup, opt$k),\n                        sprintf('- Beta for the beta-binomial length update: %s',\n                                opt$beta),\n                        sprintf('- Maximum length update %s',opt$binn),\n                        '',\n                        '- Mature stock',\n                        sprintf('- Ages between %s and %s',\n                                opt$matminage, opt$matmaxage),\n                        sprintf('- Lengths between %s and %s',\n                                opt$minlen,opt$maxlen),\n                        sprintf('- Length-weight relationship %s*l^%s',opt$a,opt$b),\n                        sprintf('- Von Bertanlanffy growth parameters: lsup = %s and k = %s',\n                                opt$lsup, opt$k),\n                        sprintf('- Beta for the beta-binomial length update: %s',\n                                opt$beta),\n                        sprintf('- Maximum length update %s',opt$binn),\n                        '',\n                        'Fleets:',\n                        '',\n                        '- Survey fleet:',\n                        sprintf('- suitability parameters\\talpha:%s\\tbeta%s',\n                                opt$salphasurv,opt$sbetasurv),\n                        sprintf('- Effort:\\t%s',opt$Fysurv),\n                        sprintf('- Timestep(s):\\t%s',\n                                paste(opt$survstep,collapse=' ')),\n                        sprintf('- Harvests in area(s) %s',\n                                paste(opt$doescatchsurv,collapse=' ')),\n                        '',\n                        '- Commercial fleet:',\n                        sprintf('- suitability parameters\\talpha:%s\\tbeta%s',\n                                opt$salphacomm,opt$sbetacomm),\n                        sprintf('- Effort:\\t%s',opt$Fycomm),\n                        sprintf('- Timestep(s):\\t%s',\n                                paste(opt$survstep,collapse=' ')),\n                        sprintf('- Harvests in area(s) %s',\n                                paste(opt$doescatchcomm,collapse=' ')),\n                        '\\n',\n                        sep='\\n')\n  cat(summary.text)\n  invisible(summary.text)\n}\n                               \n##' This function formats the output from RGadget to a dataframe and adds some \n##' trivial calculated values\n##' @title as.data.frame.gadget.sim\n##' @param sim the results from RGadget\n##' @return A dataframe \nas.data.frame.gadget.sim <- function(sim){\n  imm <- as.data.frame.table(sim$immNumRec,stringsAsFactors=FALSE)\n  names(imm)[length(names(imm))] <- 'Num.indiv'\n  catch.C.imm <- as.data.frame.table(sim$immCcomm,stringsAsFactors=FALSE)\n  names(catch.C.imm)[length(names(catch.C.imm))] <- 'Commercial.catch'\n  catch.S.imm <- as.data.frame.table(sim$immCsurv,stringsAsFactors=FALSE)\n  names(catch.S.imm)[length(names(catch.S.imm))] <- 'Survey.catch'\n  tmp.imm <- merge(imm,catch.C.imm,all=TRUE)\n  tmp.imm <- merge(tmp.imm,catch.S.imm,all=TRUE)\n  tmp.imm$year <- sapply(strsplit(tmp.imm$time,'_'),\n                         function(x) as.numeric(x[2]))\n  tmp.imm$step <- sapply(strsplit(tmp.imm$time,'_'),\n                         function(x) as.numeric(x[4]))\n  tmp.imm$length <- as.numeric(tmp.imm$length)\n  tmp.imm$age <- as.numeric(tmp.imm$age)\n  tmp.imm$weight <- opt$a*tmp.imm$length^opt$b\n  tmp.imm$stock <- 'imm'\n  \n  mat <- as.data.frame.table(sim$matNumRec,stringsAsFactors=FALSE)\n  names(mat)[length(names(mat))] <- 'Num.indiv'\n  catch.C.mat <- as.data.frame.table(sim$matCcomm,stringsAsFactors=FALSE)\n  names(catch.C.mat)[length(names(catch.C.mat))] <- 'Commercial.catch'\n  catch.S.mat <- as.data.frame.table(sim$matCsurv,stringsAsFactors=FALSE)\n  names(catch.S.mat)[length(names(catch.S.mat))] <- 'Survey.catch'\n  tmp.mat <- merge(mat,catch.C.mat,all=TRUE)\n  tmp.mat <- merge(tmp.mat,catch.S.mat,all=TRUE)\n  tmp.mat$year <- sapply(strsplit(tmp.mat$time,'_'),\n                         function(x) as.numeric(x[2]))\n  tmp.mat$step <- sapply(strsplit(tmp.mat$time,'_'),\n                         function(x) as.numeric(x[4]))\n  tmp.mat$length <- as.numeric(tmp.mat$length)\n  tmp.mat$age <- as.numeric(tmp.mat$age)\n  tmp.mat$weight <- opt$a*tmp.mat$length^opt$b\n  tmp.mat$stock <- 'mat'\n\n  tmp <- rbind(tmp.imm,tmp.mat)\n  tmp$time <- NULL\n  return(tmp)\n}\n##' Plots the suitability functions, the length weight relationship and the Von Bertalanffy growth curve.\n##' @title Plot gadget options\n##' @param opt Gadget options object\n##' @author Bjarki Þór Elvarsson\nplot.gadget.options <- function(opt){\n  ## suitability plot for the simulation\n  l <- opt$minlen:opt$maxlen\n  tmp <- data.frame(fleet=rep(c('Survey fleet','Commercial fleet'),\n                      each=(opt$maxlen - opt$minlen+1)),\n                    length=rep(l,2),\n                    weight=opt$a*l^opt$b,\n                    suitability=c(suitability(opt$salphasurv,\n                      opt$sbetasurv,0,1,l),\n                      suitability(opt$salphacomm,opt$sbetacomm,0,1,l)))\n#  suit <- xyplot(suitability~length,groups=fleet,tmp,type='l',\n#                 auto.key=list(lines=TRUE,points=FALSE),\n#                 main='Suitability')\n  suit <- qplot(length,suitability,data=tmp,colour=fleet,\n                geom='line',main='Suitability') +\n                  opts(legend.position=c(.85,0.15))\n  ## length weight relationship\n#  weight <- xyplot(weight~length,tmp[1:length(l),],main='Length-Weight',\n#                   type='l')\n  weight <- qplot(length,weight,data=tmp[1:length(l),],\n                  main='Length-Weight',geom='line')\n\n  tmp.imm <- data.frame(age=opt$immminage:opt$immmaxage,\n                        stock='immature',\n                        growth=vonB(opt$lsup,opt$k,\n                          opt$immminage:opt$immmaxage))\n  tmp.mat <- data.frame(age=opt$matminage:opt$matmaxage,\n                        stock='mat',\n                        growth=vonB(opt$lsup,opt$k,\n                          opt$matminage:opt$matmaxage))\n  tmp.age <- rbind(tmp.imm,tmp.mat)\n  vonB.plot <- qplot(age,growth,data=tmp.age,colour=stock,\n                     geom='line',main='Growth curve') +\n                       opts(legend.position=c(.85,0.15))\n  \n#  vonB.plot <- xyplot(growth~age,tmp.age,groups=stock,type='l',\n#                      auto.key=list(lines=TRUE,points=FALSE),\n#                      main='Growth curve')\n  \n  print(suit,position = c(0,0,.33,1),\n        more=TRUE)\n  print(weight,position = c(.33,0,.66,1),\n        more=TRUE)\n  print(vonB.plot,position = c(.66,0,1,1))\n}\n##' Calculate the Von Bertanlaffy curve according to the formula\n##' \\deqn{L(a) = L_\\infty (1-e^{-\\kappa a})}{L(a) = L_infty (1-e^{-kappa a})}\n##' @title Von Bertalanffy \n##' @param lsup \\eqn{L_\\infty }{L_infty} terminal length\n##' @param k \\eqn{\\kappa}{kappa}, the growth parameter\n##' @param a age of the individual\n##' @return a vector of length(a) with the calculated VB curve at age(s) a.\n##' @author Bjarki Þór Elvarsson\nvonB <- function(lsup,k,a){\n  lsup <- lsup*(1-exp(-k*a))\n}\n##' Simulated length at age\n##' @title Length at age\n##' @param sim The results from a Rgadget simulation\n##' @return a dataframe containin the length at age for both fleets\n##' @author Bjarki Þór Elvarsson\nlength.at.age <- function(sim){\n  sim.dat <- as.data.frame(sim)\n  cols <- c('age','year','step','length.at.age','fleet')\n  comm.lat <- aggregate(cbind(Commercial.catch,Commercial.catch*length)~\n                        age+year+step,sim.dat[sim.dat$step %in% sim$opt$commstep,],sum)\n  comm.lat$length.at.age <-  comm.lat[,5]/comm.lat[,4]\n  comm.lat$fleet <- 'comm'\n  comm.lat <- comm.lat[cols]\n  \n  surv.lat <- aggregate(cbind(Survey.catch,Survey.catch*length)~\n                        age+year+step,sim.dat[sim.dat$step %in% sim$opt$survstep,],sum)\n  surv.lat$length.at.age <-  surv.lat[,5]/surv.lat[,4]\n  surv.lat$fleet <- 'surv'\n  surv.lat <- surv.lat[cols]\n  lat <- rbind(surv.lat,comm.lat)\n  class(lat) <- c('Rgadget',class(lat))\n  attr(lat,'formula') <- length.at.age~age|year+step\n  attr(lat,'plotGroups') <- 'fleet'\n  attr(lat,'plotType') <- 'l'\n  attr(lat,'xaxis') <- 'Age'\n  attr(lat,'yaxis') <- 'Length'\n  attr(lat,'plotFun') <- 'xyplot'\n  \n\n  return(lat)\n  \n}\n\ntagging.recaptures <- function(sim,lambda,N){\n  ## recaptures in WI\n  U <- apply(sim$Tagged.C,7,sum)\n#  p <- lambda/(1+lambda)\n  \n  rec <- adply(U[-1],1,function(x) rnbinom(N,mu=x,size=x/lambda))\n\n  if(!is.null(sim$opt$dispersion)){\n    Cstock <- c('C1','C2','C3')\n    ci <- sim$opt$quota*10\n    Ri <- rpois(N,ci*(ci-1)/(2*sum(sim$opt$init.abund[Cstock])))\n    rho <- apply(rec[,-1],2,sum)/Ri\n  } else {\n    ci <-t(rmultinom(N,\n                     size=sum(sim$Catches),\n                     prob=apply(sim$Catches,2,sum)\n                     ))\n    names(ci) <- dimnames(sim$Abundance)$stocks\n    Ri <- ci*(ci-1)/(2*sim$opt$init.abund)\n    rho <- apply(rec[,-1],2,sum)/apply(Ri,1,sum)\n  }\n  \n\n  rec <- melt(rec,id='X1')  \n  return(list(rec=rec,rho=rho,ci=ci,Ri=Ri))\n}\n",
    "created" : 1410899694022.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3813645788",
    "id" : "A08BE194",
    "lastKnownWriteTime" : 1410554411,
    "path" : "~/Documents/rgadget/trunk/summaryFunc.R",
    "project_path" : "trunk/summaryFunc.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}